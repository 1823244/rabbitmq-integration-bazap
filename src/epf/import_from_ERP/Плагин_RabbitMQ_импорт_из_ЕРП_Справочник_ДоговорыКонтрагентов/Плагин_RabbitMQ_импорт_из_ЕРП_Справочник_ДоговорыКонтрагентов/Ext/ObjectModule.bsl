// спр Контрагенты работает с мэппингом избирательно:
// в мэппинг помещаются только несколько служебных контрагентов, например,
// 	РозничныйПокупатель
// остальные - ищем по ГУИД

Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.4");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ДоговорыКонтрагентов",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ДоговорыКонтрагентов",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры


#КонецОбласти 	


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.ДоговорыКонтрагентов") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта 			= "ДоговорыКонтрагентов";
	
	
	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();		
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
		
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			    
		
		ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText);
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();
		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//------------------------------------- Заполнение реквизитов
	//ВалютаВзаиморасчетов	Валюта	руб.
	ОбъектДанных.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалюту(деф.ВалютаВзаиморасчетов);
	//ВидДоговораСПокупателемОТП	Виды договоров с покупателем ОТП	Договор поставки товара
	//ВидУсловийДоговора	Виды условий договоров взаиморасчетов	Без дополнительных условий
	//Владелец	Контрагенты	Хлеб из тандыра ООО
	ОбъектДанных.Владелец = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	//Дата	Дата	02.10.2018 0:00:00
	ОбъектДанных.Дата = XMLЗначение(Тип("Дата"),деф.Дата);
	//ДатаПодтверждающегоДокумента	Дата	
	//ДоговорОснование	Договоры контрагентов	
	//ЗаключающийДействуетНаОсновании	Строка	
	//ИмяПредопределенныхДанных	Строка	
	//Код	Строка	ПЭС044666
	//Комментарий	Строка	
	ОбъектДанных.Комментарий = деф.Комментарий;
	//КонтактноеЛицо	Контактные лица контрагентов	Мороз Владимир Петрович
	//Наименование	Строка	BY/02.10.2018
	ОбъектДанных.Наименование = деф.Наименование;
	//Номер	Строка	BY/02.10.2018
	ОбъектДанных.Номер = деф.Номер;
	//НомерПодтверждающегоДокумента	Строка	
	//Организация	Организации	АО "Элис Фэшн Рус"
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	//Ответственный	Пользователь	Оришич Анна
	//ОтИмениКогоЗаключенДоговор	Строка	Мороз Владимира Петровича
	//ОТП	Направление коммерческой деятельности	
	//ПоДоговоруСуществуетЗаявка	Булево	Нет
	//ПодписантДиректрорПредставитель	Число	1
	//ПодписантФИОСокращенное	Строка	Мороз В.П.
	//Подразделение	Подразделения	Подразделение Поволжье
	ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение, мВнешняяСистема);
	//ПометкаУдаления	Булево	Нет
	ОбъектДанных.ПометкаУдаления = деф.ПометкаУдаления;
	//ПорядковыйНомер	Число	
	//Предопределенный	Булево	Нет
	//Проект	Проекты	
	//РеализацияНаЭкспорт	Булево	Да
	//Родитель	Договоры контрагентов	
	//СозданВЛокальнойБазе	Булево	Нет
	//Ссылка	Договоры контрагентов	BY/02.10.2018
	//ТипЦен	Типы цен номенклатуры	Цена прайса (Ростовский офис)
	ОбъектДанных.ТипЦен = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ВидЦенПродажи, мВнешняяСистема);
	//ФранчайзинговыйМагазин	Франчайзинговые магазины	
	//ЭтоГруппа	Булево	Нет

КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	//Если Свойство = "Валюта" Тогда
	//	Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	//КонецЕсли;
	
КонецФункции


#КонецОбласти 	


мВнешняяСистема = "erp";



