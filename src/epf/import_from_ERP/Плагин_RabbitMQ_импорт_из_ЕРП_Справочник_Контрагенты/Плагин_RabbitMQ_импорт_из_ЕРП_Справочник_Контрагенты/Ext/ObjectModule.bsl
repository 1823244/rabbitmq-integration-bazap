// спр Контрагенты работает с мэппингом избирательно:
// в мэппинг помещаются только несколько служебных контрагентов, например,
// 	РозничныйПокупатель
// остальные - ищем по ГУИД

Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.4");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Контрагенты");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Контрагенты");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Контрагенты",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Контрагенты",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.контрагенты") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта 			= "контрагенты";
	
	
	ДанныеСсылка = РегистрыСведений.ксп_МэппингСправочникКонтрагенты.ПоМэппингу(id.Ref, мВнешняяСистема);
	Если ЗначениеЗаполнено(ДанныеСсылка) Тогда
		Возврат ДанныеСсылка;
	КонецЕсли;
	
	
	РегистрыСведений.ксп_МэппингСправочникКонтрагенты.ДобавитьГУИД(id.Ref, деф.description, мВнешняяСистема);

	
	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();		
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
		
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			    
		
		ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText);
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();  
		
		// устанавливаем загруженного контрагента в мэппинг
		
		НЗ = РегистрыСведений.ксп_МэппингСправочникКонтрагенты.СоздатьНаборЗаписей();
		НЗ.Отбор.GUID.Установить(id.Ref);
		НЗ.Отбор.ВнешняяСистема.Установить(мВнешняяСистема);
		
		НЗ.Прочитать();
		Если НЗ.Количество() = 0 Тогда
			НовСтр = НЗ.Добавить();
		Иначе 
			новСтр = НЗ[0];
		КонецЕсли;
		НовСтр.GUID = id.Ref;
		НовСтр.ВнешняяСистема = мВнешняяСистема;
		НовСтр.Контрагент = ОбъектДанных.Ссылка;
		НовСтр.Наименование = деф.description;
		
		НЗ.Записать();
		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//------------------------------------- Заполнение реквизитов
	ОбъектДанных.ИНН = деф.ИНН;
	ОбъектДанных.КПП = деф.КПП;
	ОбъектДанных.Наименование = деф.description;
	ОбъектДанных.НаименованиеПолное = деф.НаименованиеПолное;
	ОбъектДанных.ОГРН	=	деф.РегистрационныйНомер;
	ОбъектДанных.Покупатель = ИСТИНА;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	Если ((деф.свойство("ЮрФизЛицо") и деф.ЮрФизЛицо.Свойство("Значение") и деф.ЮрФизЛицо.Значение = "ИндивидуальныйПредприниматель"))
		ИЛИ ((деф.свойство("ЮрФизЛицо") и деф.ЮрФизЛицо.Свойство("Значение") и деф.ЮрФизЛицо.Значение = "ФизЛицо"))
		ИЛИ СтрДлина(деф.ЮрФизЛицо) = 12 Тогда
		ОбъектДанных.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		ОбъектДанных.ФормаСобственности	 = Справочники.ФормыЮридическойСобственности.НайтиПоНаименованию("ИП", Истина);
	Иначе 
		ОбъектДанных.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ОбъектДанных.ФормаСобственности	 = Справочники.ФормыЮридическойСобственности.НайтиПоНаименованию("ООО", Истина);
	КонецЕсли;
	Для каждого стрк Из деф.ТЧКонтактнаяИнформация Цикл
		Если НЕ стрк.Свойство("Тип") Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ стрк.Тип.Свойство("Значение") Тогда
			Продолжить;
		КонецЕсли;	
		Если НЕ стрк.Тип.Значение = "Адрес" Тогда
			Продолжить;
		КонецЕсли;	
		
		ОбъектДанных.Город = Справочники.Города.НайтиПоНаименованию(стрк.Город);
		ОбъектДанных.Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(стрк.Страна);
		ОбъектДанных.Регион = Справочники.Регионы.НайтиПоНаименованию(стрк.Регион);
		
	КонецЦикла;


КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	


мВнешняяСистема = "erp";



