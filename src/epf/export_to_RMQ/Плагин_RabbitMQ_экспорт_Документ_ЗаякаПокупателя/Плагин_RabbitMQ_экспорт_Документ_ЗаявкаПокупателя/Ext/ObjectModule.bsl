#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ЗаявкаПокупателя");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ЗаявкаПокупателя");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ЗаявкаПокупателя",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ЗаявкаПокупателя",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(Ссылка) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявкаПокупателя") Тогда
		Обк = Ссылка.ПолучитьОбъект(); 
	Иначе 
		Обк = Ссылка; 
	КонецЕсли;

	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "BP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	//	DEFINITION
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	//Таблица:	Шапка	
	//		
	//		
	//Реквизит	Тип	Вид
	
	//Номер Число
	definition.Вставить("Number", Обк.Номер);
	
	//Дата Дата
	definition.Вставить("Date", обк.Дата);
	
	//Организация Справочник Организации
	definition.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация)); 	
	
	//Контрагент Справочник	Контрагенты
	definition.Вставить("Контрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Контрагент)); 
	
	//СтавкаНДС	Перечисление СтавкиНДС
	definition.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтавкаНДС)); 	
	
	//Грузополучатель Справочник Контрагенты
	definition.Вставить("Грузополучатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Грузополучатель)); 	

	//ДоговорКонтрагента Справочник ДоговорыКонтрагентов
	definition.Вставить("ДоговорКонтрагента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДоговорКонтрагента)); 	
	
	//Комментарий Строка
	definition.Вставить("Комментарий", Обк.Комментарий);
	
	//СуммаДокумента Число
	definition.Вставить("СуммаДокумента", Обк.СуммаДокумента); 


	
	// ТЧ ТОВАР
	
	ТЧТовары = Новый Массив;
	
    Для сч = 0 По обк.товар.Количество()-1 Цикл
		
		стрк = обк.товар[сч];
		
		СтрокаТовары = Новый Структура;   
		
		//Реквизит	Тип	Вид
		
		//Номенклатура	Справочник	Номенклатура
		СтрокаТовары.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура)); 
		
		//ХарактеристикаНоменклатуры Справочник ХарактеристикиНоменклатуры
		СтрокаТовары.Вставить("ХарактеристикаНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ХарактеристикаНоменклатуры));
		
		
		//СтавкаНДС Перечисление СтавкиНДС
		СтрокаТовары.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.СтавкаНДС)); 
	
		//Количество Число
		СтрокаТовары.Вставить("Количество", Обк.Количество); 
		
		//Цена Число
		СтрокаТовары.Вставить("Цена", Обк.Цена);
		
		//ПроцентАвтоматическойСкидки Число
		СтрокаТовары.Вставить("ПроцентАвтоматическойСкидки", Обк.ПроцентАвтоматическойСкидки); 
		
		//Сумма Число
		СтрокаТовары.Вставить("Сумма", Обк.Сумма); 
		
		//СуммаНДС Число
		СтрокаТовары.Вставить("СуммаНДС", Обк.СуммаНДС); 
				
		
		ТЧТовары.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	definition.Вставить("ТЧТовары", ТЧТовары);
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОбъектыДляВыгрузки(Узел) Экспорт
	Возврат Неопределено;
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаПокупателя.Ссылка КАК Ссылка,
	|	ЗаявкаПокупателя.Номер КАК Номер,
	|	ЗаявкаПокупателя.Дата КАК Дата,
	|	ЗаявкаПокупателя.Организация КАК Организация,
	|	ЗаявкаПокупателя.Контрагент КАК Контрагент,
	|	ЗаявкаПокупателя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкаПокупателя.Комментарий КАК Комментарий,
	|	ЗаявкаПокупателя.СтавкаНДС КАК СтавкаНДС,
	|	ЗаявкаПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ЗаявкаПокупателя.Грузополучатель КАК Грузополучатель,
	|	ЗаявкаПокупателя.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок
	|	) КАК Товары
	|ИЗ
	|	Документ.ЗаявкаПокупателя.Изменения КАК ЗаявкаПокупателяИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаПокупателя КАК ЗаявкаПокупателя
	|		ПО ЗаявкаПокупателяИзменения.Ссылка = ЗаявкаПокупателя.Ссылка
	|ГДЕ
	|	ЗаявкаПокупателяИзменения.Узел = &НужныйУзелПланаОбмена";
	
	Запрос.УстановитьПараметр("НужныйУзелПланаОбмена", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция getRoutingKey() Экспорт
	Возврат "doc";
КонецФункции

